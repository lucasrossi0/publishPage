[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "publishPage",
    "section": "",
    "text": "This is a Quarto website.\nthis is the python script:\nimport os\nimport requests\n\n# Função para criar o URL com os parâmetros fornecidos\ndef generate_url():\n    print(\"Por favor, insira os seguintes dados:\")\n    name = input(\"Nome do projeto: \")\n    artifact_id = input(\"Artifact ID: \")\n    group_id = input(\"Group ID: \")\n    java_version = input(\"Versão Java (ex: 17): \")\n    packaging = input(\"Escolha o packaging (jar ou war): \")\n    build_tool = input(\"Escolha o build tool (maven ou gradle): \")\n    description = input(\"Descrição do projeto: \")\n    dependencies = input(\"Dependências (separadas por vírgula, ex: web,data-jpa): \")\n\n    url = f\"https://start.spring.io/starter.zip?type={build_tool}-project&language=java&platformVersion=3.4.1&packaging={packaging}&jvmVersion={java_version}&groupId={group_id}&artifactId={artifact_id}&name={name}&description={description}&packageName={group_id}.{artifact_id}&dependencies={dependencies}\"\n    return url\n\n# Função para baixar o projeto no Desktop\ndef download_project(url):\n    desktop_path = os.path.join(os.path.expanduser(\"~\"), \"Desktop\")  # Caminho para a área de trabalho\n    try:\n        response = requests.get(url)\n        response.raise_for_status()  # Garante que o código de status HTTP seja 200 (OK)\n\n        # Verifica se o conteúdo é realmente um arquivo zip\n        if \"zip\" not in response.headers[\"Content-Type\"]:\n            print(\"Erro: O arquivo baixado não é um .zip válido.\")\n            return\n\n        file_name = url.split('=')[-1] + '.zip'\n        file_path = os.path.join(desktop_path, file_name)\n\n        with open(file_path, 'wb') as file:\n            file.write(response.content)\n        \n        print(f\"Projeto baixado com sucesso para: {file_path}\")\n    except requests.exceptions.HTTPError as errh:\n        print(f\"Erro HTTP: {errh}\")\n    except requests.exceptions.ConnectionError as errc:\n        print(f\"Erro de Conexão: {errc}\")\n    except requests.exceptions.Timeout as errt:\n        print(f\"Erro de Timeout: {errt}\")\n    except requests.exceptions.RequestException as err:\n        print(f\"Erro ao fazer a requisição: {err}\")\n\n# Função principal\ndef main():\n    url = generate_url()\n    download_project(url)\n\nif __name__ == \"__main__\":\n    main()\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  }
]